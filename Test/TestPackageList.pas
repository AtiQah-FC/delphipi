{**
 DelphiPI (Delphi Package Installer)
 Author  : ibrahim dursun (t-hex) thex [at] thexpot ((dot)) net
 License : GNU General Public License 2.0
**}
unit TestPackageList;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Classes, Types, StrUtils, PackageInfo;
type
  // Test methods for class TPackageList
  
  TestTPackageList = class(TTestCase)
  strict private
    FPackageList: TPackageList;
    p1,p2,p3 : TPackageInfo;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAdd;
    procedure TestIndexOf;
//    procedure TestLoadFromFolder;
//    procedure TestGetWeights;
    procedure TestSourceListing;
    procedure TestOrderList;
  end;

implementation
uses sysutils,forms;
procedure TestTPackageList.SetUp;
var
 path : string;
begin
  path := ExtractFilePath(Application.Exename) + 'testing\*.dpk';
  FPackageList := TPackageList.LoadFromFolder(path);
  
  p1 := FPackageList[0];
  p2 := FPackageList[1];
  p3 := FPackageList[2];
end;

procedure TestTPackageList.TearDown;
begin
  FPackageList.Free;
  FPackageList := nil;
end;

procedure TestTPackageList.TestAdd;
begin
  CheckEquals(9,FPackageList.Count);
end;

procedure TestTPackageList.TestIndexOf;
begin
  CheckEquals(0,FPackageList.IndexOf('p1'));
  CheckEquals(1,FPackageList.IndexOf('p2'));
  CheckEquals(2,FPackageList.IndexOf('p3'));
  CheckEquals(-1,FPackageList.IndexOf('Package'));
end;

procedure TestTPackageList.TestOrderList;
var
  I: Integer;
  J: Integer;
  pack : TPackageInfo;
  reqPack : String;
  reqPackIndex  : Integer;
begin

  FPackageList.SortList;

  for I := 0 to FPackageList.Count - 1 do begin
    pack := FPackageList[i];
    for J := 0 to pack.Requires.Count - 1 do begin
       reqPack := pack.Requires[j];
       reqPackIndex := FPackageList.IndexOf(reqPack);
       CheckTrue(reqPackIndex <= i,
         Format('%s at %d requires %s at %d but order is wrong',[pack.PackageName,i,reqPack,reqPackIndex]));
    end;
  end;

//  CheckTrue(p3 = FPackageList[0],'p3');
//  CheckTrue(p2 = FPackageList[1],'p2');
//  CheckTrue(p1 = FPackageList[2],'p1');
end;


procedure TestTPackageList.TestSourceListing;
var
  list: TStringList;
begin
  list := TStringList.Create;
  try
    FPackageList.GetSourcePaths(list);
    CheckEquals(FPackageList.InitialFolder + 'source\',list[0]);
    CheckEquals(FPackageList.InitialFolder + 'source\p3\',list[1]);
    CheckEquals(2,list.Count,'count check');
  finally
    list.Free;
  end;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTPackageList.Suite);
end.

