unit TestPackageList;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Classes, StrUtils, PackageInfo, PackageList;

type
        TestTPackageList = class(TTestCase)
        strict private
                package1, package2, package3: TPackageInfo;
                FPackageList: TPackageList;
                FTestObjects: TList;
                procedure EstablishContext;
        public
                procedure SetUp; override;
                procedure TearDown; override;
                
        published
                procedure TestClear;
                procedure TestAdd;
                procedure TestRemove;
                procedure TestIndexOf;
//                procedure TestSortList;
        end;

implementation

procedure TestTPackageList.SetUp;
begin
  FPackageList := TPackageList.Create;
  EstablishContext;
end;


procedure TestTPackageList.EstablishContext;
begin
     FTestObjects := TList.Create;

     package1 := TPackageInfo.Create;
     package1.PackageName := 'package1';

     package2 := TPackageInfo.Create;
     package2.PackageName := 'package2';

     package3 := TPackageInfo.Create;
     package3.PackageName := 'package3';

     FPackageList.Add(package1);
     FPackageList.Add(package2);
     FPackageList.Add(package3);
     
end;

procedure TestTPackageList.TearDown;
begin
  package1.Free;
  package2.Free;
  package3.Free;
  
  FPackageList.Free;
  FPackageList := nil;
end;

procedure TestTPackageList.TestClear;
begin
  FPackageList.Clear;
  Assert(FPackageList.Count = 0, 'should be empty');
end;

procedure TestTPackageList.TestAdd;
var
  item: TPackageInfo;
  oldCount: Integer;
begin
  item := TPackageInfo.Create;
  item.PackageName := 'added package';
  oldCount := FPackageList.Count;
  
  FPackageList.Add(item);
  
  CheckTrue(FPackageList.IndexOf('added package') <> -1, 'should find in the list');
  CheckEquals(oldCount + 1, FPackageList.Count,'count should be 1 more');
end;

procedure TestTPackageList.TestRemove;
var
        item: TPackageInfo;
        oldCount: integer;
begin
        item := package2;
        oldCount := FPackageList.Count;
        FPackageList.Remove(item);

        CheckEquals(oldCount-1, FPackageList.Count, 'count should be one less');
        CheckEquals(-1, FPackageList.IndexOf(item.PackageName), 'should not be in the list');
end;

procedure TestTPackageList.TestIndexOf;
var
        ReturnValue: Integer;
        PackageName: string;
begin
        PackageName := 'packAge2';
        ReturnValue := FPackageList.IndexOf(PackageName);
        CheckEquals(1, ReturnValue);
end;
//
//procedure TestTPackageList.TestSortList;
//begin
//        FPackageList.SortList;
//        // TODO: Validate method results
//end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTPackageList.Suite);
end.

